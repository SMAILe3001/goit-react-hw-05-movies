{"version":3,"file":"static/js/716.f5b40ccb.chunk.js","mappings":"kOAiDA,UA7CgB,WACd,OAA+BA,EAAAA,EAAAA,UAAS,IAAxC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAU,mCAAG,oGAEfN,GAAa,GAFE,UAGQO,EAAAA,EAAAA,GAAW,SAAD,OAAUJ,EAAV,YAHlB,OAGTN,EAHS,OAIfC,GAAW,OAAID,EAASW,UAJT,gDAMfN,GAAS,GACTO,QAAQC,IAAR,MAPe,yBASfV,GAAa,GATE,4EAAH,qDAYhBM,GAbmB,CAcpB,GAAE,CAACH,KAGF,iCACE,yBACGN,EACEc,QAAO,kBAAuB,YAAvB,EAAGC,IAAH,IACPC,KAAI,SAAAC,GAAO,OACV,mBAEEC,MAAM,MACNC,OAAO,MACPC,IAAG,wCAAmCH,EAAQI,KAC9CC,MAAOL,EAAQM,KACfC,iBAAe,GALVP,EAAQQ,GAFL,MAWfvB,IAAa,mDACbE,IAAS,sHAGf,C,8FC/CYsB,EAAW,gCACXC,EAAU,mCCEjBjB,EAAU,mCAAG,WAAOkB,GAAP,4FAAmBC,EAAnB,+BAA2B,GAAIC,EAA/B,+BAAsC,EAAtC,SACJC,EAAAA,EAAAA,IAAA,UACHL,GADG,OACQE,GAAc,CAC/BI,OAAQ,CACNF,KAAMA,EACNG,QAASN,EACTO,SAAU,KACVL,MAAOA,KAGVM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,IAAb,IAVC,mFAAH,sDAahB,G","sources":["components/Film/Treiler/Treiler.jsx","servises/api.js","servises/servise.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchFilms from 'servises/servise';\n\nconst Treiler = () => {\n  const [treilers, setTreiler] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { filmId } = useParams();\n\n  useEffect(() => {\n    if (!filmId) return;\n    const searchData = async () => {\n      try {\n        setIsLoading(true);\n        const treilers = await fetchFilms(`movie/${filmId}/videos`);\n        setTreiler([...treilers.results]);\n      } catch (error) {\n        setError(true);\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    searchData();\n  }, [filmId]);\n\n  return (\n    <>\n      <div>\n        {treilers\n          .filter(({ type }) => type === 'Trailer')\n          .map(treiler => (\n            <iframe\n              key={treiler.id}\n              width=\"560\"\n              height=\"315\"\n              src={`https://www.youtube.com/embed/${treiler.key}`}\n              title={treiler.name}\n              allowfullscreen\n            ></iframe>\n          ))}\n      </div>\n      {isLoading && <h2>We are loading reviews</h2>}\n      {error && <h2>Щось пішло не так</h2>}\n    </>\n  );\n};\n\nexport default Treiler;\n","export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = '432ccaf7113b52e993b924f1fb358945';\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from './api';\n\nconst fetchFilms = async (parameters, query = '', page = 1) => {\n  return await axios\n    .get(`${BASE_URL}${parameters}`, {\n      params: {\n        page: page,\n        api_key: API_KEY,\n        language: 'en',\n        query: query,\n      },\n    })\n    .then(response => response.data);\n};\n\nexport default fetchFilms;\n"],"names":["useState","treilers","setTreiler","isLoading","setIsLoading","error","setError","filmId","useParams","useEffect","searchData","fetchFilms","results","console","log","filter","type","map","treiler","width","height","src","key","title","name","allowfullscreen","id","BASE_URL","API_KEY","parameters","query","page","axios","params","api_key","language","then","response","data"],"sourceRoot":""}