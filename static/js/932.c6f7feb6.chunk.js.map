{"version":3,"file":"static/js/932.c6f7feb6.chunk.js","mappings":"iRA6DA,EAvDa,WACX,OAAgCA,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAU,mCAAG,oGAEfN,GAAa,GAFE,UAGQO,EAAAA,EAAAA,GAAW,SAAD,OAAUJ,EAAV,aAHlB,OAGTN,EAHS,OAIfC,GAAY,OAAID,EAASW,OAJV,gDAMfN,GAAS,GACTO,QAAQC,IAAR,MAPe,yBASfV,GAAa,GATE,4EAAH,qDAYhBM,GAbmB,CAcpB,GAAE,CAACH,KAGF,2BACW,OAARN,QAAQ,IAARA,GAAAA,EAAUc,QACT,eAAIC,UAAU,eAAd,SACGf,EAASgB,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC5C,OACE,gBAAIL,UAAU,eAAd,WACE,gBACEA,UAAU,iBACVM,QAAQ,OACRC,IACEJ,EAAY,yCAC0BA,GAClCK,EAENC,IAAKL,KAEP,wBAAKA,KACL,6CAAqBC,OAZWH,EAerC,OAGH,oEAEDf,IAAa,iEACbE,IAAS,sHAGf,C,8GC3DYqB,EAAW,gCACXC,EAAU,mCCGjBhB,EAAU,mCAAG,WAAOiB,GAAP,4FAAmBC,EAAnB,+BAA2B,GAAIC,EAA/B,+BAAsC,EAAtC,SACJC,EAAAA,EAAAA,IAAA,UACHL,GADG,OACQE,GAAc,CAC/BI,OAAQ,CACNF,KAAMA,EACNG,QAASN,EACTO,SAAU,KACVL,MAAOA,KAGVM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,IAAb,IAVC,mFAAH,sDAahB,IAEA1B,EAAW2B,SAAW,CACpBV,WAAYW,IAAAA,OACZV,MAAOU,IAAAA,OACPT,KAAMS,IAAAA,O","sources":["components/Film/Cast/Cast.jsx","servises/api.js","servises/servise.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchFilms from 'servises/servise';\nimport defaultImages from '../../../img/onImages.png';\nimport './Cast.scss';\n\nconst Cast = () => {\n  const [infoFilm, setInfoFilm] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { filmId } = useParams();\n\n  useEffect(() => {\n    if (!filmId) return;\n    const searchData = async () => {\n      try {\n        setIsLoading(true);\n        const infoFilm = await fetchFilms(`movie/${filmId}/credits`);\n        setInfoFilm([...infoFilm.cast]);\n      } catch (error) {\n        setError(true);\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    searchData();\n  }, [filmId]);\n\n  return (\n    <div>\n      {infoFilm?.length ? (\n        <ul className=\"profile_list\">\n          {infoFilm.map(({ cast_id, profile_path, name, character }) => {\n            return (\n              <li className=\"profile_item\" key={cast_id}>\n                <img\n                  className=\"profile_images\"\n                  loading=\"lazy\"\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w300${profile_path}`\n                      : defaultImages\n                  }\n                  alt={name}\n                />\n                <h3>{name}</h3>\n                <span>In the role - {character}</span>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>There is no information about the actors</p>\n      )}\n      {isLoading && <h2>Loading information about the actors</h2>}\n      {error && <h2>Щось пішло не так</h2>}\n    </div>\n  );\n};\n\nexport default Cast;\n","export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = '432ccaf7113b52e993b924f1fb358945';\n","import PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { BASE_URL, API_KEY } from './api';\n\nconst fetchFilms = async (parameters, query = '', page = 1) => {\n  return await axios\n    .get(`${BASE_URL}${parameters}`, {\n      params: {\n        page: page,\n        api_key: API_KEY,\n        language: 'uk',\n        query: query,\n      },\n    })\n    .then(response => response.data);\n};\n\nexport default fetchFilms;\n\nfetchFilms.propType = {\n  parameters: PropTypes.string,\n  query: PropTypes.string,\n  page: PropTypes.number,\n};\n"],"names":["useState","infoFilm","setInfoFilm","isLoading","setIsLoading","error","setError","filmId","useParams","useEffect","searchData","fetchFilms","cast","console","log","length","className","map","cast_id","profile_path","name","character","loading","src","defaultImages","alt","BASE_URL","API_KEY","parameters","query","page","axios","params","api_key","language","then","response","data","propType","PropTypes"],"sourceRoot":""}